// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskMaster.Models;

#nullable disable

namespace TaskMaster.Migrations
{
    [DbContext(typeof(TaskMasterContext))]
    [Migration("20250409090321_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Commentaires", b =>
                {
                    b.Property<int>("Id_Commentaires")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id_Commentaires"));

                    b.Property<string>("Contenu")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Id_Tache")
                        .HasColumnType("int");

                    b.Property<int>("Id_Utilisateur")
                        .HasColumnType("int");

                    b.Property<int>("TacheId_Tache")
                        .HasColumnType("int");

                    b.Property<int>("UtilisateurId_Utilisateur")
                        .HasColumnType("int");

                    b.HasKey("Id_Commentaires");

                    b.HasIndex("TacheId_Tache");

                    b.HasIndex("UtilisateurId_Utilisateur");

                    b.ToTable("Commentaires");
                });

            modelBuilder.Entity("Historique", b =>
                {
                    b.Property<int>("Id_Historique")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id_Historique"));

                    b.Property<string>("AncienneValeur")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Id_Tache")
                        .HasColumnType("int");

                    b.Property<string>("NouvelleValeur")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TacheId_Tache")
                        .HasColumnType("int");

                    b.HasKey("Id_Historique");

                    b.HasIndex("TacheId_Tache");

                    b.ToTable("Historiques");
                });

            modelBuilder.Entity("Participer", b =>
                {
                    b.Property<int>("Id_Utilisateur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id_Utilisateur"));

                    b.Property<int>("Id_Projet")
                        .HasColumnType("int");

                    b.Property<int>("Id_Tache")
                        .HasColumnType("int");

                    b.Property<int>("ProjetId_Projet")
                        .HasColumnType("int");

                    b.Property<int>("TacheId_Tache")
                        .HasColumnType("int");

                    b.Property<int>("UtilisateurId_Utilisateur")
                        .HasColumnType("int");

                    b.HasKey("Id_Utilisateur");

                    b.HasIndex("ProjetId_Projet");

                    b.HasIndex("TacheId_Tache");

                    b.HasIndex("UtilisateurId_Utilisateur");

                    b.ToTable("Participers");
                });

            modelBuilder.Entity("Projet", b =>
                {
                    b.Property<int>("Id_Projet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id_Projet"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id_Projet");

                    b.ToTable("Projets");
                });

            modelBuilder.Entity("SousTache", b =>
                {
                    b.Property<int>("Id_SousTache")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id_SousTache"));

                    b.Property<DateTime>("DateEcheance")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Id_Tache")
                        .HasColumnType("int");

                    b.Property<int>("Id_Utilisateur")
                        .HasColumnType("int");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TacheId_Tache")
                        .HasColumnType("int");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UtilisateurId_Utilisateur")
                        .HasColumnType("int");

                    b.HasKey("Id_SousTache");

                    b.HasIndex("TacheId_Tache");

                    b.HasIndex("UtilisateurId_Utilisateur");

                    b.ToTable("SousTaches");
                });

            modelBuilder.Entity("Tache", b =>
                {
                    b.Property<int>("Id_Tache")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id_Tache"));

                    b.Property<string>("Categorie")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateEcheance")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Etiquette")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Id_Utilisateur")
                        .HasColumnType("int");

                    b.Property<string>("Priorite")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UtilisateurId_Utilisateur")
                        .HasColumnType("int");

                    b.HasKey("Id_Tache");

                    b.HasIndex("UtilisateurId_Utilisateur");

                    b.ToTable("Taches");
                });

            modelBuilder.Entity("Utilisateur", b =>
                {
                    b.Property<int>("Id_Utilisateur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id_Utilisateur"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MotDePasse")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id_Utilisateur");

                    b.ToTable("Utilisateurs");
                });

            modelBuilder.Entity("Commentaires", b =>
                {
                    b.HasOne("Tache", "Tache")
                        .WithMany()
                        .HasForeignKey("TacheId_Tache")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Utilisateur", "Utilisateur")
                        .WithMany()
                        .HasForeignKey("UtilisateurId_Utilisateur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tache");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("Historique", b =>
                {
                    b.HasOne("Tache", "Tache")
                        .WithMany()
                        .HasForeignKey("TacheId_Tache")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tache");
                });

            modelBuilder.Entity("Participer", b =>
                {
                    b.HasOne("Projet", "Projet")
                        .WithMany()
                        .HasForeignKey("ProjetId_Projet")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tache", "Tache")
                        .WithMany()
                        .HasForeignKey("TacheId_Tache")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Utilisateur", "Utilisateur")
                        .WithMany()
                        .HasForeignKey("UtilisateurId_Utilisateur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Projet");

                    b.Navigation("Tache");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("SousTache", b =>
                {
                    b.HasOne("Tache", "Tache")
                        .WithMany()
                        .HasForeignKey("TacheId_Tache")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Utilisateur", "Utilisateur")
                        .WithMany()
                        .HasForeignKey("UtilisateurId_Utilisateur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tache");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("Tache", b =>
                {
                    b.HasOne("Utilisateur", "Utilisateur")
                        .WithMany()
                        .HasForeignKey("UtilisateurId_Utilisateur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utilisateur");
                });
#pragma warning restore 612, 618
        }
    }
}
